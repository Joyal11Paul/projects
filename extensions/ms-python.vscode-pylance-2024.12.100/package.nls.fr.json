{
    "ClientLoc.ServerRestart.crashMessage": "Pylance s’est bloquée.",
    "ClientLoc.ServerRestart.crashRestartingMessage": "Pylance s’est bloquée. Pylance redémarre lorsque vous sélectionnez un exécutable Node.js pour exécuter Pylance.",
    "ClientLoc.ServerRestart.restartingMessage": "Redémarrage de Pylance à l’aide de Node.js...",
    "ClientLoc.ServerRestart.selectButton": "Sélectionner",
    "ClientLoc.ServerRestart.selectNodeJsTitle": "Sélectionner Node.js exécutable pour exécuter Pylance",
    "ClientLoc.askNodeSafetyQuestion": "Pylance est configurée pour s’exécuter avec {0}. Voulez-vous utiliser cet exécutable pour exécuter Pylance ?",
    "ClientLoc.autoImportCompletionsStatusItem.name": "Mode complétions d’importation automatique Python",
    "ClientLoc.autoImportCompletionsStatusItem.text": "Complétions d’importation automatique : {0}",
    "ClientLoc.autoImportCompletionsStatusItem.titleOff": "Basculer vers désactivé",
    "ClientLoc.autoImportCompletionsStatusItem.titleOn": "Basculer vers activé",
    "ClientLoc.crashTooManyRestarts": "Pylance s’est écrasé 5 fois au cours des 3 dernières minutes. Pylance ne sera pas redémarré. Pour plus d’informations, consultez [ce lien](https://aka.ms/AApf7ox).",
    "ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch": "Pylance et l’extension Python ont des dépendances partagées incompatibles.\r\nVérifiez que les deux extensions sont la dernière version préliminaire.",
    "ClientLoc.pylanceAndPythonStableExtensionMismatch": "Pylance et l’extension Python ont des dépendances partagées incompatibles.\r\nVérifiez que les deux extensions sont la dernière version stable.",
    "ClientLoc.typeCheckingModeStatusItem.name": "Mode de vérification du type Python",
    "ClientLoc.typeCheckingModeStatusItem.pickerPlaceholder": "Mode actuel : {0}. Sélectionner le mode de vérification du type.",
    "ClientLoc.typeCheckingModeStatusItem.pickerSettingsPage": "afficher sur la page des paramètres",
    "ClientLoc.typeCheckingModeStatusItem.textFormatted": "Vérification de type : {0}",
    "ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig": "Vérification de type : {0} (de {1})",
    "ClientLoc.typeCheckingModeStatusItem.title": "Sélectionner le mode de vérification du type",
    "ClientLoc.typeCheckingModeStatusItem.titleConfig": "Ouvrir la configuration",
    "ClientLoc.updateSettingsErrorMsgFormatted": "Échec de la mise à jour du paramètre '{0}.{1}'.",
    "Common.Help": "Aide",
    "Common.No": "Non",
    "Common.Yes": "Oui",
    "Common.reload": "Recharger",
    "Common.remindMeLater": "Me rappeler plus tard",
    "LanguageServer.settingsMigratedMessage": "Les paramètres applicables à Microsoft Language Server ont été copiés dans les paramètres Pylance. Veuillez vérifier le(s) fichier(s) settings.json pour plus de détails.",
    "LanguageServer.settingsMigrationError": "Impossible de migrer les paramètres suivants :",
    "LanguageServer.settingsNotOverridable": "impossible de définir « {0} » lorsqu’un pyrightconfig.json ou pyproject.toml est utilisé.",
    "Refactoring.MoveSymbol.newFileDetail": "Entrer le chemin d’accès ou sélectionner le fichier de destination",
    "Refactoring.MoveSymbol.newFileLabel": "Entrer le chemin d’accès du fichier de destination",
    "Refactoring.MoveSymbol.openDialogOpenLabel": "Sélectionner",
    "Refactoring.MoveSymbol.openDialogTitle": "Sélectionner un nouveau fichier pour déplacer le symbole vers ...",
    "Refactoring.MoveSymbol.progressBarTitle": "Déplacer le symbole vers ...",
    "Refactoring.MoveSymbol.quickPickPlaceHolder": "Rechercher le fichier de destination",
    "Refactoring.MoveSymbol.quickPickTitle": "Sélectionner la destination pour le déplacement",
    "Refactoring.MoveSymbol.separatorText": "Fichiers de destination",
    "Refactoring.SearchImports.quickPickPlaceHolder": "Rechercher des importations",
    "Refactoring.SearchImports.quickPickTitle": "Rechercher d’autres importations correspondantes",
    "commands.pylance.docstrings.fold.title": "Pylance: Fold All Docstrings",
    "commands.pylance.docstrings.unfold.title": "Pylance: Unfold All Docstrings",
    "commands.pylance.gotoOutputChannel.title": "Pylance: accéder au canal de sortie",
    "commands.pylance.indexing.clearPersistedIndices.title": "Pylance: effacer tous les index persistants",
    "commands.pylance.logging.start.title": "Pylance: démarrer la journalisation",
    "commands.pylance.logging.stop.title": "Pylance: arrêter la journalisation",
    "commands.pylance.profiling.start.title": "Pylance: démarrer le profilage",
    "commands.pylance.profiling.stop.title": "Pylance: arrêter le profilage",
    "commands.pylance.reportIssue.title": "Pylance: problème de rapport...",
    "settings.languageServerMode.default.description": "Laissez Pylance avec les paramètres par défaut.",
    "settings.languageServerMode.description": "Sélectionnez un ensemble prédéfini de valeurs pour les paramètres. Pour plus d’informations, consultez [ce lien](https://aka.ms/languageserver-mode).",
    "settings.languageServerMode.full.description": "Activez la plupart des fonctionnalités de Pylance par défaut. Consultez le lien dans la description pour savoir exactement quels paramètres sont définis sur quelle valeur.",
    "settings.languageServerMode.light.description": "Définissez Pylance pour effectuer uniquement un travail essentiel afin de lui donner un poids léger. Consultez le lien dans la description pour savoir exactement les paramètres qui sont définis sur une valeur en particulier.",
    "settings.python.analysis.aiCodeActions.description": "Activez/désactivez les actions de code assistées par l’IA. Nécessite l’activation de l’extension Copilot Chat.",
    "settings.python.analysis.aiCodeActions.implementAbstractClasses.description": "Activez/désactivez l’assistance de l’IA pour implémenter des classes abstraites héritées.",
    "settings.python.analysis.autoFormatStrings.description.message": "When typing a `{` in a string, automatically prefix the string with an `f`.",
    "settings.python.analysis.autoImportCompletions.description": "Activez les complétions d’importation automatique.",
    "settings.python.analysis.autoIndent.description": "Ajustez automatiquement la mise en retrait en fonction de la sémantique de langage lors de la saisie de code Python.",
    "settings.python.analysis.autoSearchPaths.description": "Automatically add common search paths like `src`.",
    "settings.python.analysis.cacheLSPData.description": "Mettez en cache les données LSP pour des exécutions plus rapides. Expérimental, peut entraîner l’arrêt du fonctionnement de Pylance.",
    "settings.python.analysis.completeFunctionParens.description": "Ajoutez des parenthèses aux complétions de fonction.",
    "settings.python.analysis.diagnosticMode.description": "Étendue d’analyse pour l’affichage des diagnostics.",
    "settings.python.analysis.diagnosticSeverityOverrides.description": "Allows a user to override the severity levels for individual diagnostics. \r\n\r\nUse the rule name as a key and one of `error`, `warning`, `information`, `none`, `true` (alias for `error`) or `false` (alias for `none`) as value. The default value shown for each diagnostic is the default when #python.analysis.typeCheckingMode# is set to `off`. See [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode (`off`, `basic` and `strict`).",
    "settings.python.analysis.disableTaggedHints.description": "Désactivez les diagnostics d’indicateur avec des indicateurs spéciaux pour le texte grisé ou barré.",
    "settings.python.analysis.displayEnglishDiagnostics.description": "Affichez les diagnostics en anglais quelle que soit la langue d'affichage de VS Code.",
    "settings.python.analysis.enablePytestSupport.description": "Active la prise en charge de pytest dans Pylance.",
    "settings.python.analysis.enableSyncServer.description": "Utiliser le mode sync server [Expérimental]. Pour usage interne uniquement, Pylance peut cesser de fonctionner.",
    "settings.python.analysis.exclude.description": "Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. \r\n\r\nNote that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. \r\n\r\nPaths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character). \r\n\r\nIf no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories. If the path contains a `${workspaceFolder:<workspaceName>}` variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.extraCommitChars.description": "Autorisez l’utilisation de '.', '(' en tant que caractères de validation, le cas échéant.",
    "settings.python.analysis.extraPaths.description": "Chemins de résolution de recherche d’importation supplémentaires",
    "settings.python.analysis.fixAll.description": "correctifs sources à exécuter dans tous les correctifs.",
    "settings.python.analysis.generateWithTypeAnnotation.description": "Ajouter des annotations de type lors de la génération du code. La valeur par défaut est `false` pour le mode de vérification de type `off` et `true` pour les autres modes.",
    "settings.python.analysis.gotoDefinitionInStringLiteral.description": "Pour les littéraux de chaîne qui ressemblent à des noms de module, permet d’accéder à la définition pour accéder au module.",
    "settings.python.analysis.ignore.description": "Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. \r\n\r\nPaths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character). \r\n\r\nIf the path contains a `${workspaceFolder:<workspaceName>}` variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.importFormat.description": "Définit le format par défaut des modules d’importation.",
    "settings.python.analysis.include.description": "Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. \r\n\r\nPaths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character). \r\n\r\nIf the path contains a `${workspaceFolder:<workspaceName>}` variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.includeAliasesFromUserFiles.description": "Inclure les symboles d’alias des fichiers utilisateur. Cela va rendre les symboles d’alias à afficher dans les fonctionnalités telles que 'add import', 'auto import'",
    "settings.python.analysis.indexing.description": "Activez l’indexation des bibliothèques tierces installées et des fichiers utilisateur pour les fonctionnalités de langage telles que l’importation automatique, l’ajout d’importation, les symboles d’espace de travail, etc.",
    "settings.python.analysis.inlayHints.callArgumentNames.description": "Activer/désactiver les indicateurs d’inlay pour les noms d’arguments d’appel :\r\n```python\r\ndatetime('year='2019, 'month='10, 'day='27)\r\n```\r\n",
    "settings.python.analysis.inlayHints.functionReturnTypes.description": "Activez/désactivez les indicateurs d’inlay pour les types de retour de fonction :\r\n```python\r\ndef foo(x:int) '-> int':\r\n\treturn x\r\n```\r\n",
    "settings.python.analysis.inlayHints.pytestParameters.description": "Activer/désactiver les conseils inlay pour les types de paramètres de fonction pytest :\r\n```python\r\ndef test_foo(my_fixture: 'str'):\r\n\tassert(my_fixture == 'foo')\r\n```\r\n",
    "settings.python.analysis.inlayHints.variableTypes.description": "Activer/Désactiver les indicateurs d’inlay pour les types de variables. Les indicateurs ne sont pas affichés pour les affectations de littéraux ou de constantes :\r\n```python\r\nfoo':list[str]' = [\"a\"]\r\n \r\n```\r\n",
    "settings.python.analysis.logLevel.description": "Spécifie le niveau de journalisation pour le panneau Sortie",
    "settings.python.analysis.nodeExecutable.description": "Chemin d’accès à un exécutable Node.js à utiliser pour exécuter le serveur de langues. S’il n’est pas spécifié, le serveur de langue utilisera l’exécutable Node.js fourni avec le VS Code. Activez cette option si vous avez des problèmes avec Pylance qui manque de mémoire. Voir [ici](https://aka.ms/AApf7ox) pour plus d’informations.",
    "settings.python.analysis.packageIndexDepths.description": "Utilisé pour remplacer le nombre de niveaux sous les packages installés à indexer par package. Par défaut, seuls les modules de niveau supérieur sont indexés (depth = 1). Pour indexer des sous-modules, augmentez la depth de 1 pour chaque niveau de sous-module que vous souhaitez indexer. Les valeurs acceptées sont :\r\n```JSON\r\n{\"name\": \"package name (str)\",\r\n \"depth\": \"depth to scan (int)\",\r\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\r\n\r\n```\r\nSi « includeAllSymbols » est défini sur « false », seuls les symboles dans « __all__ » de chaque package sont inclus. Lorsqu’il est défini sur « true », Pylance indexera chaque déclaration de module/symbole de niveau supérieur dans le fichier.  \r\n  \r\nExemple d’utilisation : \r\n```JSON\r\n[\r\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\r\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\r\n]\r\n\r\n```\r\n",
    "settings.python.analysis.persistAllIndices.description": "Les index de toutes les bibliothèques tierces sont conservés sur le disque.",
    "settings.python.analysis.regenerateStdLibIndices.description": "Au lieu de vous appuyer sur les index de stdlib.json partagés pour toutes les versions de Python, générez des index uniques adaptés à la version et à la plateforme Python spécifiques de chaque espace de travail. Ce processus de re-génération affecte les performances, contrairement à l’utilisation des index stdlib prédéfinis.",
    "settings.python.analysis.reportExtraTelemetry.description": "Signaler des données de télémétrie supplémentaires [Expérimental]. Pour usage interne uniquement, peut entraîner un ralentissement de Pylance.",
    "settings.python.analysis.showOnlyDirectDependenciesInAutoImport.description": "Afficher uniquement les dépendances directes déclarées dans « requirements.txt » ou « pyproject.toml » dans les suggestions « auto import », le cas échéant. Ceci n’affecte que l’importation automatique pour les complétions. L’action d’ajout de code d’importation continuera d’afficher toutes les importations possibles.",
    "settings.python.analysis.stubPath.description": "Chemin d’accès au répertoire contenant des fichiers stub de type personnalisé.",
    "settings.python.analysis.supportDocstringTemplate.description": "Activez/désactivez la prise en charge de la génération de chaînes de documents. Dans une chaîne docstring vide, utilisez « Ctrl+Espace » pour générer une chaîne docstring.",
    "settings.python.analysis.supportRestructuredText.description": "Activez/désactivez la prise en charge de reStructuredText dans les docstrings.",
    "settings.python.analysis.typeEvaluation.analyzeUnannotatedFunctions.description": "Analysez et signalez les erreurs des fonctions et des méthodes qui n’ont pas d’annotations de type pour les paramètres d’entrée ou les types de retour. La valeur par défaut de ce paramètre est « true ».",
    "settings.python.analysis.typeEvaluation.deprecateTypingAliases.description": "[PEP 585](https://peps.python.org/pep-0585) indicates that aliases to types in standard collections that were introduced solely to support generics are deprecated as of Python 3.9. This switch controls whether these are treated as deprecated. This applies only when pythonVersion is 3.9 or newer. The default value for this setting is `false` but may be switched to `true` in the future.",
    "settings.python.analysis.typeEvaluation.disableBytesTypePromotions.description": "Désactive le comportement hérité où `bytearray` et `memoryview` sont considérés comme des sous-types de `bytes`. [PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes) déconseille ce comportement, mais ce commutateur est fourni pour restaurer l’ancien comportement. La valeur par défaut de ce paramètre est `false`.",
    "settings.python.analysis.typeEvaluation.enableExperimentalFeatures.description": "Active un ensemble de fonctionnalités expérimentales (principalement non documentées) qui correspondent aux modifications proposées ou exploratoires apportées à la norme de saisie Python. Ces fonctionnalités seront probablement modifiées ou supprimées, de sorte qu’elles ne doivent pas être utilisées à l’exception de l’expérimentation. La valeur par défaut de ce paramètre est `false`.",
    "settings.python.analysis.typeEvaluation.enableReachabilityAnalysis.description": "Si cette option est activée, le code qui est déterminé comme inaccessible par l’analyse de type est signalé à l’aide d’un indicateur marqué. Ce paramètre n’affecte pas le code qui est considéré comme inaccessible, quelle que soit l’analyse de type ; ce code est toujours signalé comme inaccessible. Ce paramètre n’a pas d’effet non plus lors de l’utilisation de la version de ligne de commande de l’pyright, car il n’émet jamais d’indicateurs marqués pour du code inaccessible.",
    "settings.python.analysis.typeEvaluation.enableTypeIgnoreComments.description": "[PEP 484](https://peps.python.org/pep-0484) defines support for `# type: ignore` comments. This switch enables or disables support for these comments. The default value for this setting is `true`. This does not affect `# pyright: ignore` comments.",
    "settings.python.analysis.typeEvaluation.strictDictionaryInference.description": "When inferring the type of a dictionary’s keys and values, use strict type assumptions. For example, the expression \r\n\r\n```python\r\n{'a': 1, 'b': 'a'}\r\n```\r\n could be inferred to be of type `dict[str, Any]` or `dict[str, int | str]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.strictListInference.description": "When inferring the type of a list, use strict type assumptions. For example, the expression \r\n\r\n```python\r\n[1, 'a', 3.4]\r\n```\r\n could be inferred to be of type `list[Any]` or `list[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.strictParameterNoneValue.description": "[PEP 484](https://peps.python.org/pep-0484) indicates that when a function parameter is assigned a default value of None, its type should implicitly be Optional even if the explicit type is not. When enabled, this rule requires that parameter type annotations use Optional explicitly in this case. The default value for this setting is `true`.",
    "settings.python.analysis.typeEvaluation.strictSetInference.description": "When inferring the type of a set, use strict type assumptions. For example, the expression \r\n\r\n```python\r\n{1, 'a', 3.4}\r\n```\r\n could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typecheckingMode.description": "Defines the default rule set for type checking.",
    "settings.python.analysis.typeshedPaths.description": "Chemins d’accès à rechercher pour les modules typeshed.",
    "settings.python.analysis.useLibraryCodeForTypes.description": "Utilisez les implémentations de bibliothèque pour extraire des informations de type lorsque le stub de type n’est pas présent.",
    "settings.python.analysis.userFileIndexingLimit.description": "Nombre maximal de fichiers utilisateur à indexer dans l’espace de travail. L’indexation des fichiers est une tâche gourmande en performances. Utilisez ce paramètre pour limiter le nombre de fichiers à indexer. Si vous entrez -1, nous indexerons tous les fichiers.",
    "settings.typecheckingMode.basic.description": "All rules from `off` + `basic` type checking rules.",
    "settings.typecheckingMode.off.description": "Afficher les diagnostics pour la syntaxe non valide, les importations non résolues et les variables non définies.",
    "settings.typecheckingMode.standard.description": "All rules from `basic` + `standard` type checking rules.",
    "settings.typecheckingMode.strict.description": "All rules from `standard` + `strict` type checking rules."
}
